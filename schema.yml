openapi: 3.0.3
info:
  title: Notes Backend API
  version: 1.0.0
  description: All Endpoints for Notes Backend
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      parameters:
        - in: query
          name: email addreess
          description: Enter valid Email Address
          required: true
          schema:
            type: string
            example: test123@gmail.com
        - in: query
          name: password
          description: Enter Password
          required: true
          schema:
            type: string
            example: test123@
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/login/refresh/:
    post:
      operationId: api_auth_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      parameters:
        - in: query
          name: refresh token
          description: Enter valid refresh token
          required: true
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzA0NDUyMDkzLCJpYXQiOjE3MDQ0NDg0OTMsImp0aSI6IjljNDk2NWNiYWZlYzQzZjU4ODg0ODI0YzRlZjdjYWE4IiwidXNlcl9pZCI6NH0.kM--HE3s6UUsuecfimKMnLDcKo7ycB2r-y12iSJz1ps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/signup/:
    post:
      operationId: api_auth_signup_create
      tags:
      - api
      parameters:
        - in: query
          name: email addreess
          description: Enter valid Email Address
          required: true
          schema:
            type: string
            example: test123@gmail.com
        - in: query
          name: password
          description: Enter Password
          required: true
          schema:
            type: string
            example: test123@  
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/notes/:
    get:
      operationId: api_notes_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
          description: ''
    post:
      operationId: api_notes_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Note'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: ''
  /api/notes/{id}/share/:
    post:
      operationId: api_notes_share_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: shared_with
        description: Enter mails with whom you want to share notes
        required: true
        schema:
          type: array
          example: test123@
          items:
            type: string
             
          
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/notes/{id}/:
    get:
      operationId: api_notes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: ''
    put:
      operationId: api_notes_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Note'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: ''
    patch:
      operationId: api_notes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNote'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: ''
    delete:
      operationId: api_notes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/notes/search/:
    get:
      summary: Search API
      description: Endpoint to perform a search on notes title
      parameters:
        - name: q
          in: query
          description: The search query for titles of notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                results:
                  - item1
                  - item2
                  - item3
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: "Invalid search query"
    
    # get:
      
    #   operationId: api_notes_search_retrieve
    #   tags:
    #   - api
      
    #   security:
    #   - jwtAuth: []
    #   responses:
    #     '200':
    #       description: No response body
components:
  schemas:
    Note:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
      required:
      - content
      - id
      - title
    PatchedNote:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          maxLength: 128
      required:
      - email
      - id
      - password
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
